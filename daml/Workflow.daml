module Workflow where

import Daml.Script
-- import DA.List

import Iou
import Paint
import Main

data Parties = Parties
  with
    alice: Party
    bob : Party
    bank : Party
    george : Party

assumeFirst: forall tpl p. (Template tpl, IsParties p) => p -> Script (ContractId tpl)
assumeFirst party = do
  (headId, _) :: _ <- query @tpl party
  pure headId

-- | Bank user creates an Iou for Alice
bankIou : Parties -> Script (ContractId Iou)
bankIou parties = do
  iou <- submit parties.bank do
    createCmd Iou with owner = parties.alice; payer = parties.bank; amount = Amount{value = 100.0, currency = "USD"}; viewers = []
  pure (iou)

-- | Bob offers to paint house
paintOffer : Parties -> Script (ContractId OfferToPaintHouseByPainter)
paintOffer parties = do
  paintOffer <- submit parties.bob do
    createCmd OfferToPaintHouseByPainter with houseOwner = parties.alice; bank = parties.bank; painter = parties.bob; amount = Amount{value = 100.0, currency = "USD"}
  pure (paintOffer)

acceptOffer : Parties -> Script (ContractId Iou)
acceptOffer parties = do
  iouId <- assumeFirst @Iou parties.alice
  offerId <- assumeFirst @OfferToPaintHouseByPainter parties.alice
  acceptId <- submit parties.alice do
    exerciseCmd offerId AcceptByOwner with iouId = iouId
  pure (acceptId)

callOffer : Parties -> Script (ContractId GetCash)
callOffer parties = do
  iouId <- assumeFirst @Iou parties.bob
  cashId <- submit parties.bob do
    exerciseCmd iouId Call
  pure (cashId)

archiveCash : Parties -> Script ()
archiveCash parties = do
  cashId <- assumeFirst @GetCash parties.bob
  submitMulti [parties.bob, parties.bank] [] do
    archiveCmd cashId
  pure ()


-- The following functions are used for the Triggers demo

configDonorP1 : Parties -> Script ()
configDonorP1 parties = do
  aliceConfig <- submit parties.alice do createCmd DonorConfig with owner = parties.alice; donateTo = parties.alice
  pure ()

configDonorP2 : Parties -> Script ()
configDonorP2 parties = do
  bobConfig <- submit parties.bob do createCmd DonorConfig with owner = parties.bob; donateTo = parties.alice
  georgeConfig <- submit parties.george do createCmd DonorConfig with owner = parties.george; donateTo = parties.bob
  pure ()

allocateAssetP1: Parties -> Script (ContractId Asset)
allocateAssetP1 parties = do
  aliceTV <- submit parties.alice do createCmd Asset with issuer = parties.alice; owner = parties.alice; name = "TV"

  bobTV <- submit parties.alice do
    exerciseCmd aliceTV Give with newOwner = parties.bob
  pure (bobTV)

allocateAssetP2: Parties -> Script ()
allocateAssetP2 parties = do
  bobTV <- assumeFirst @Asset parties.bob
  submit parties.bob do
    exerciseCmd bobTV Give with newOwner = parties.alice
  pure ()

testAsset: Parties -> Script ()
testAsset parties = do
  aliceCamera <- submit parties.alice do
    createCmd Asset with
      issuer = parties.alice
      owner = parties.alice
      name = "Camera"

  aliceUmbrella <- submit parties.alice do
    createCmd Asset with
      issuer = parties.alice
      owner = parties.alice
      name = "Umbrella"

  georgeCamera <- submit parties.alice do
    exerciseCmd aliceCamera Give with newOwner = parties.george

  submit parties.alice do
    exerciseCmd aliceUmbrella Give with newOwner = parties.bob
  pure()
